<?php

namespace Fluxuser\Controller;

use Doctrine\ORM\Tools\SchemaTool;
use FluxuserTest\FactoryFluxuser;
use Zend\Authentication\AuthenticationService;
use Zend\Test\PHPUnit\Controller\AbstractHttpControllerTestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-01-03 at 18:35:26.
 */
class FluxuserControllerTest extends AbstractHttpControllerTestCase {

    protected $entityManager;
    protected $userAdmin;
    protected $userGuest;
    protected $userOwner;
    protected $userProjectmanager;
    protected $userUser;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->setApplicationConfig(include 'config/application.config.php');

        $this->entityManager = $this->getApplicationServiceLocator()->get('doctrine.entitymanager.orm_default');
        $tool = new SchemaTool($this->entityManager);

        $this->entityManager->clear();

        $mdFactory = $this->entityManager->getMetadataFactory();
        $tool->dropSchema($mdFactory->getAllMetadata());
        $tool->createSchema($mdFactory->getAllMetadata());

        $this->createTestData();
        
        parent::setUp();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        $this->entityManager = $this->getApplicationServiceLocator()->get('doctrine.entitymanager.orm_default');
        $tool = new SchemaTool($this->entityManager);

        $this->entityManager->clear();

        $mdFactory = $this->entityManager->getMetadataFactory();
        $tool->dropSchema($mdFactory->getAllMetadata());
        $this->reset();
        parent::tearDown();
    }

    private function logUserIn(\Fluxuser\Entity\FluxUser $user, $password = 'password'){
        $this->getResponse()->getHeaders()->clearHeaders();
        $this->dispatch('/');
        $postData = array(
            'workEmail' => $user->getWorkemail(),
            'password'  => $password,
        );
        $this->dispatch('/', 'POST', $postData);
        $auth = new AuthenticationService();
        $this->assertTrue($auth->hasIdentity(), 'The user did not login successfully!');
        $this->assertRedirectTo('/mytask');
        $this->getResponse()->getHeaders()->clearHeaders();
    }

    /**
     * Tests that the Index page is being rendered.
     * 
     * @covers Fluxuser\Controller\FluxuserController::indexAction
     */
    public function testIndexAction() {
        $this->logUserIn($this->userUser);
        $this->dispatch('/fluxuser');

        $this->assertResponseStatusCode(302);
        $this->assertActionName('index');
    }
    
    /**
     * Tests that an user is being redirected to the login page, if the user 
     * is not currently logged in.
     * 
     * @covers Fluxuser\Controller\LoginController::loginAction
     */
    public function testUserIsBeingRediectedToLoginPageIfNotLoggedIn() {
        $this->markTestSkipped('This test crashes the entire test suite');
        $this->dispatch('/fluxuser');
        $this->assertRedirectTo('/');
        $this->assertResponseStatusCode(403);
    }

    /**
     * Tests that only the usergroup with permission to add a new user can 
     * access the add page.
     * 
     * @covers Fluxuser\Controller\FluxuserController::addAction
     */
    public function testUsergroupsAccessToAddAction() {
        $this->logUserIn($this->userGuest);
        $this->dispatch('/fluxuser/add');
        $this->assertResponseStatusCode(403);
        $this->assertRedirect();
        $this->dispatch('/logout');
        $auth = new AuthenticationService();
        $this->assertFalse($auth->hasIdentity(), 'The user did not logout successfully!');
        
        $this->logUserIn($this->userUser);
        $this->dispatch('/fluxuser/add');
        $this->assertResponseStatusCode(403);
        $this->assertRedirect();
        $this->dispatch('/logout');
        $auth = new AuthenticationService();
        $this->assertFalse($auth->hasIdentity(), 'The user did not logout successfully!');
        
        $this->logUserIn($this->userProjectmanager);
        $this->dispatch('/fluxuser/add');
        $this->assertResponseStatusCode(403);
        $this->assertRedirect();
        $this->dispatch('/logout');
        $auth = new AuthenticationService();
        $this->assertFalse($auth->hasIdentity(), 'The user did not logout successfully!');
        
        $this->logUserIn($this->userAdmin);
        $this->dispatch('/fluxuser/add');
        $this->assertResponseStatusCode(302);
        $this->dispatch('/logout');
        $auth = new AuthenticationService();
        $this->assertFalse($auth->hasIdentity(), 'The user did not logout successfully!');
        
        $this->logUserIn($this->userOwner);
        $this->dispatch('/fluxuser/add');
        $this->assertResponseStatusCode(302);
        $this->dispatch('/logout');
        $auth = new AuthenticationService();
        $this->assertFalse($auth->hasIdentity(), 'The user did not logout successfully!');
    }
    
    /**
     * Tests that a new user is created.
     * 
     * @covers Fluxuser\Controller\FluxuserController::addAction
     */
    public function testCreatingANewUSerViaAddAction() {
        $this->logUserIn($this->userAdmin);
        $this->dispatch('/fluxuser/add');
        $this->assertActionName('add');
        $params = array(
            'firstname'  => 'Anders',
            'lastname'   => 'And',
            'workEmail'  => 'and@flux.dk',
            'username'   => 'and',
            'password'   => 'password',
            'fkuserrole' => $this->entityManager->getRepository('Fluxuser\Entity\Usergroup')->findOneBy(array('permissiongroup' => 'user'))->getId(),
        );
        $this->dispatch('/fluxuser/add', 'POST', $params);
        $this->assertRedirectTo('/fluxuser');
        $newUser = $this->entityManager->getRepository('Fluxuser\Entity\FluxUser')->findOneBy(array('workEmail' => 'and@flux.dk'));
        $this->assertNotNull($newUser, 'No user was created');
        $this->assertEquals('Anders', $newUser->getFirstname(), sprintf('Firstname is not correctly sat. Expected: %s , Actual: %s', 'Anders', $newUser->getFirstname()));
        $this->assertEquals('And', $newUser->getLastname(), sprintf('Lastname is not correctly sat. Expected: %s , Actual: %s', 'And', $newUser->getLastname()));
        $this->assertEquals('and@flux.dk', $newUser->getWorkemail(), sprintf('Work email is not correctly sat. Expected: %s , Actual: %s', 'and@flux.dk', $newUser->getWorkemail()));
        $this->assertEquals('and', $newUser->getUsername(), sprintf('Username is not correctly sat. Expected: %s , Actual: %s', 'and', $newUser->getUsername()));
        $this->assertEquals('user', $newUser->getFkuserrole()->getPermissiongroup(), sprintf('Usergroup is not correctly sat. Expected: %s , Actual: %s', 'user', $newUser->getFkuserrole()->getPermissiongroup()));
        $this->assertEquals(2, $newUser->getState(), sprintf("The User's state is not 'unverified'. Expected: %d , Actual: %s", 2, $newUser->getState()));
        
        /**
         * Testing that the new user cannot login without verifying the user account first
         */
        $this->dispatch('/logout');
        $auth = new AuthenticationService();
        $this->assertFalse($auth->hasIdentity(), 'The user did not logout successfully!');
        $postData = array(
            'workEmail' => $newUser->getWorkemail(),
            'password'  => 'password',
        );
        $this->dispatch('/', 'POST', $postData);
        $auth = new AuthenticationService();
        $this->assertFalse($auth->hasIdentity(), 'The new user should not be able to login before verifying the user');
        $this->assertQuery('.label-danger');
        $this->assertQueryContentContains('.label-danger .white-text', 'User does not exist or is not active');
    }
    
    /**
     * Tests that an invalid user cannot be created.
     * 
     * @covers Fluxuser\Controller\FluxuserController::addAction
     */
    public function testCannotCreateUnvalidUser() {
        $this->logUserIn($this->userAdmin);
        $this->dispatch('/fluxuser/add');
        $this->assertActionName('add');
        $params = array(
            'firstname'  => 'Anders',
            'lastname'   => 'And',
            'workEmail'  => 'fluxtime.dk',
            'username'   => 'and',
            'password'   => 'password',
            'fkuserrole' => $this->entityManager->getRepository('Fluxuser\Entity\Usergroup')->findOneBy(array('permissiongroup' => 'user'))->getId(),
        );
        $this->dispatch('/fluxuser/add', 'POST', $params);
        $this->assertQueryContentContains('#error-workEmail', 'Invalid email format');
        $newUser = $this->entityManager->getRepository('Fluxuser\Entity\FluxUser')->findOneBy(array('workEmail' => 'and@flux.dk'));
        $this->assertNull($newUser, 'Invalid user was created in the database.');
    }

    /**
     * Tests that only the usergroup with permission to edit a user can 
     * access the edit page.
     * 
     * @covers Fluxuser\Controller\FluxuserController::addAction
     */
    public function testUsergroupsAccessToEditAction() {
        $controller = new FluxuserController();

        $this->logUserIn($this->userGuest);
        $this->dispatch('/fluxuser/edit/' . $controller->encrypt($this->userGuest->getId(), SECRET_KEY));
        $this->assertResponseStatusCode(403);
        $this->assertRedirect();
        $this->dispatch('/logout');
        $auth = new AuthenticationService();
        $this->assertFalse($auth->hasIdentity(), 'The user did not logout successfully!');

        $this->logUserIn($this->userUser);
        $this->dispatch('/fluxuser/edit/' . $controller->encrypt($this->userUser->getId(), SECRET_KEY));
        $this->assertResponseStatusCode(403);
        $this->assertRedirect();
        $this->dispatch('/logout');
        $auth = new AuthenticationService();
        $this->assertFalse($auth->hasIdentity(), 'The user did not logout successfully!');

        $this->logUserIn($this->userProjectmanager);
        /**
         * Why does it crash when ProjectManager tries to access his own fluxuser/edit page?
         * TODO: FIX THIS ^
         */
//        $this->dispatch('/fluxuser/edit/' . $controller->encrypt($this->userProjectmanager->getId(), SECRET_KEY));
        $this->dispatch('/fluxuser/edit/' . $controller->encrypt($this->userUser->getId(), SECRET_KEY));
        $this->assertResponseStatusCode(403);
        $this->assertRedirect();
        $this->dispatch('/logout');
        $auth = new AuthenticationService();
        $this->assertFalse($auth->hasIdentity(), 'The user did not logout successfully!');

        $this->logUserIn($this->userAdmin);
        $this->dispatch('/fluxuser/edit/' . $controller->encrypt($this->userAdmin->getId(), SECRET_KEY));
        $this->assertResponseStatusCode(302);
        $this->dispatch('/logout');
        $auth = new AuthenticationService();
        $this->assertFalse($auth->hasIdentity(), 'The user did not logout successfully!');

        $this->logUserIn($this->userOwner);
        $this->dispatch('/fluxuser/edit/' . $controller->encrypt($this->userOwner->getId(), SECRET_KEY));
        $this->assertResponseStatusCode(302);
        $this->dispatch('/logout');
        $auth = new AuthenticationService();
        $this->assertFalse($auth->hasIdentity(), 'The user did not logout successfully!');
    }

    /**
     * @covers Fluxuser\Controller\FluxuserController::editAction
     * @todo   Implement testEditAction().
     */
    public function testEditAction() {
        $controller = new FluxuserController();
        
        $this->logUserIn($this->userAdmin);
        $this->dispatch('/fluxuser/edit/' . $controller->encrypt($this->userUser->getId(), SECRET_KEY));
        $this->assertResponseStatusCode(302);
                
        $params = array(
            'firstname'  => $this->userUser->getFirstname(),
            'lastname'   => 'Usersen',
            'workEmail'  => $this->userUser->getWorkemail(),
            'username'   => $this->userUser->getUsername(),
            'fkuserrole' => $this->userUser->getFkuserrole()->getId(),
        );
        $this->dispatch('/fluxuser/edit/' . $controller->encrypt($this->userUser->getId(), SECRET_KEY), 'POST', $params);
        $this->assertRedirectTo('/fluxuser');
        
        $newUser = $this->entityManager->getRepository('Fluxuser\Entity\FluxUser')->findOneBy(array('workEmail' => $this->userUser->getWorkemail()));
        $this->assertNotNull($newUser, 'User was deleted');
        $this->assertEquals($this->userUser->getFirstname(), $newUser->getFirstname(), sprintf('Firstname was uncorrectly edited. Expected: %s , Actual: %s', $this->userUser->getFirstname(), $newUser->getFirstname()));
        $this->assertEquals('Usersen', $newUser->getLastname(), sprintf('Lastname was uncorrectly edited. Expected: %s , Actual: %s', 'Usersen', $newUser->getLastname()));
        $this->assertEquals($this->userUser->getWorkemail(), $newUser->getWorkemail(), sprintf('Work email was uncorrectly edited. Expected: %s , Actual: %s', $this->userUser->getWorkemail(), $newUser->getWorkemail()));
        $this->assertEquals($this->userUser->getUsername(), $newUser->getUsername(), sprintf('Username was uncorrectly edited. Expected: %s , Actual: %s', $this->userUser->getUsername(), $newUser->getUsername()));
        $this->assertEquals($this->userUser->getgetFkuserrole()->getPermissiongroup(), $newUser->getFkuserrole()->getPermissiongroup(), sprintf('Usergroup was uncorrectly edited. Expected: %s , Actual: %s', $this->userUser->getgetFkuserrole()->getPermissiongroup(), $newUser->getFkuserrole()->getPermissiongroup()));
        $this->assertEquals($this->userUser->getState(), $newUser->getState(), sprintf("The User's state was uncorrectly edited'. Expected: %d , Actual: %s", $this->userUser->getState(), $newUser->getState()));
        
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * Tries to delete a user via ajaxconfirmdeleteAction.
     * 
     * @covers Fluxuser\Controller\FluxuserController::ajaxconfirmdeleteAction
     */
    public function testDeletingAUserViaAjaxconfirmdeleteAction() {
        $this->logUserIn($this->userAdmin);
        $this->dispatch('/fluxuser', 'GET');
        $this->assertActionName('index');
        $this->assertQuery('#myModal .modal .fade');
        $this->assertNotQuery('#myModal .modal .fade .in');
        
        $this->assertEquals(1, $this->userGuest->getState(), sprintf("The user is already deleted or not verifyed'. Expected: %d , Actual: %s", 1, $this->userGuest->getState()));
        $params = array(
            'id' => $this->userGuest->getId(),
        );
        $this->dispatch('/fluxuser/ajaxconfirmdelete', 'POST', $params, true);
        $content = $this->getResponse()->getContent();
        $this->assertEquals('{"status":true}', $content, sprintf("The user was not deleted correctly'. Expected: %d , Actual: %s", '{"status":true}', $content));
    }
    
    /**
     * Tries to delete a user via ajaxconfirmdeleteAction.
     * 
     * @covers Fluxuser\Controller\FluxuserController::ajaxconfirmdeleteAction
     */
    public function testDeletingAUserViaAjaxconfirmdeleteActionWithoutXmlHttpRequest() {
        $this->logUserIn($this->userAdmin);
        $this->dispatch('/fluxuser', 'GET');
        $this->assertActionName('index');
        $this->assertQuery('#myModal .modal .fade');
        $this->assertNotQuery('#myModal .modal .fade .in');
        
        $this->assertEquals(1, $this->userGuest->getState(), sprintf("The user is already deleted or not verifyed'. Expected: %d , Actual: %s", 1, $this->userGuest->getState()));
        $params = array(
            'id' => $this->userGuest->getId(),
        );
        $this->dispatch('/fluxuser/ajaxconfirmdelete', 'POST', $params);
        $content = $this->getResponse()->getContent();
        $this->assertEquals('{"error":"This method only respons to XmlHttpRequests!"}', $content, sprintf("The user was not deleted correctly'. Expected: %d , Actual: %s", '{"error":"This method only respons to XmlHttpRequests!"}', $content));
    }
    
    /**
     * Tries to delete a nonexisting user via ajaxconfirmdeleteAction.
     * 
     * @covers Fluxuser\Controller\FluxuserController::ajaxconfirmdeleteAction
     */
    public function testDeletingAnUnknownUserViaAjaxconfirmdeleteAction() {
        $this->logUserIn($this->userAdmin);
        $this->dispatch('/fluxuser', 'GET');
        $this->assertActionName('index');
        $this->assertQuery('#myModal .modal .fade');
        $this->assertNotQuery('#myModal .modal .fade .in');
        
        $params = array(
            'id' => 85,
        );
        $this->dispatch('/fluxuser/ajaxconfirmdelete', 'POST', $params, true);
        $content = $this->getResponse()->getContent();
        $this->assertEquals('{"status":false}', $content, sprintf("The user was not deleted correctly'. Expected: %d , Actual: %s", '{"status":false}', $content));
    }

    /**
     * Tests that the correct API token from Pivotal Tracker is returned.
     * 
     * @covers Fluxuser\Controller\FluxuserController::fetchApiTokenAction
     */
    public function testFetchApiTokenActionViaXmlHttpRequest() {
        $this->logUserIn($this->userAdmin);
        
        $params = array(
            'user' => 'Andersbo2',
            'pass' => 'Anders1302',
        );
        
        $this->dispatch('/fluxuser/fetchApiToken', 'POST', $params, true);
        $this->assertEquals('{"apitoken":"b5e57404c1fc3fe0283766206b6bbf4c"}', $this->getResponse()->getContent(), sprintf('Incorrect API Token received form Pivotal Tracker! Expected: %s , Actual: %s', '{"apitoken":"b5e57404c1fc3fe0283766206b6bbf4c"}', $this->getResponse()->getContent()));
    }
    
    /**
     * Tests that an error is thrown if we don't receive an XmlHttpRequest.
     * 
     * @covers Fluxuser\Controller\FluxuserController::fetchApiTokenAction
     */
    public function testFetchApiTokenActionWithoutXmlHttpRequest() {
        $this->logUserIn($this->userAdmin);
        
        $params = array(
            'user' => 'Andersbo2',
            'pass' => 'Anders1302',
        );
        
        $this->dispatch('/fluxuser/fetchApiToken', 'POST', $params);
        $this->assertEquals('{"error":"This method only respons to XmlHttpRequests!"}', $this->getResponse()->getContent(), sprintf('Wrong message received! Expected: %s , Actual: %s', '{"error":"This method only respons to XmlHttpRequests!"}', $this->getResponse()->getContent()));
    }

    /**
     * Tests that the user's Pivotal Tracker API Token is correctly deleted.
     * 
     * @covers Fluxuser\Controller\FluxuserController::deleteApiTokenAction
     */
    public function testDeleteApiTokenAction() {        
        $this->logUserIn($this->userAdmin);
        $this->userUser->setPivotaltrackerapi('b5e57404c1fc3fe0283766206b6bbf4c');
        $this->entityManager->persist($this->userUser);
        $this->entityManager->flush();

        $this->assertNotEmpty($this->userUser->getPivotaltrackerapi(), sprintf("The User's Pivotal Tracker API Token was not sat!"));

        $params = array(
            'userid' => $this->userUser->getId(),
        );

        $this->dispatch('/fluxuser/deleteApiToken', 'POST', $params, true);
        $this->assertEquals('{"result":true}', $this->getResponse()->getContent(), sprintf('Wrong message received! Expected: %s , Actual: %s', '{"result":true}', $this->getResponse()->getContent()));

        $newUser = $this->entityManager->getRepository('Fluxuser\Entity\FluxUser')->findOneBy(array('id' => $this->userUser->getId()));
        $this->assertNotNull($newUser, 'User was deleted');
        $this->assertEquals($this->userUser->getFirstname(), $newUser->getFirstname(), sprintf('Firstname was uncorrectly edited. Expected: %s , Actual: %s', $this->userUser->getFirstname(), $newUser->getFirstname()));
        $this->assertEquals($this->userUser->getLastname(), $newUser->getLastname(), sprintf('Lastname was uncorrectly edited. Expected: %s , Actual: %s', $this->userUser->getLastname(), $newUser->getLastname()));
        $this->assertEquals($this->userUser->getWorkemail(), $newUser->getWorkemail(), sprintf('Work email was uncorrectly edited. Expected: %s , Actual: %s', $this->userUser->getWorkemail(), $newUser->getWorkemail()));
        $this->assertEquals($this->userUser->getUsername(), $newUser->getUsername(), sprintf('Username was uncorrectly edited. Expected: %s , Actual: %s', $this->userUser->getUsername(), $newUser->getUsername()));
        $this->assertEquals($this->userUser->getFkuserrole()->getPermissiongroup(), $newUser->getFkuserrole()->getPermissiongroup(), sprintf('Usergroup was uncorrectly edited. Expected: %s , Actual: %s', $this->userUser->getFkuserrole()->getPermissiongroup(), $newUser->getFkuserrole()->getPermissiongroup()));
        $this->assertEquals($this->userUser->getState(), $newUser->getState(), sprintf("The User's state was uncorrectly edited'. Expected: %d , Actual: %d", $this->userUser->getState(), $newUser->getState()));
        $this->assertNotEquals($this->userUser->getPivotaltrackerapi(), $newUser->getPivotaltrackerapi(), sprintf("The User's Pivotal Tracker API Token was not deleted!'. Expected: %s , Actual: %s", "null || ''", $newUser->getPivotaltrackerapi()));
        $this->assertEmpty($newUser->getPivotaltrackerapi(), sprintf("The User's Pivotal Tracker API Token was not deleted! Expected: %s, Actual: %s", "null || ''", $newUser->getPivotaltrackerapi()));
    }

    /**
     * Tests that an error is thrown if we don't receive an XmlHttpRequest.
     * 
     * @covers Fluxuser\Controller\FluxuserController::deleteApiTokenAction
     */
    public function testDeleteApiTokenActionWithoutXmlHttpReqest() {
        $this->logUserIn($this->userAdmin);
        $this->userUser->setPivotaltrackerapi('b5e57404c1fc3fe0283766206b6bbf4c');
        $this->entityManager->persist($this->userUser);
        $this->entityManager->flush();

        $this->assertNotEmpty($this->userUser->getPivotaltrackerapi(), sprintf("The User's Pivotal Tracker API Token was not sat!"));

        $params = array(
            'userid' => $this->userUser->getId(),
        );
        $this->dispatch('/fluxuser/deleteApiToken', 'POST', $params);
        $this->assertEquals('{"error":"This method only respons to XmlHttpRequests!"}', $this->getResponse()->getContent(), sprintf('Wrong message received! Expected: %s , Actual: %s', '{"error":"This method only respons to XmlHttpRequests!"}', $this->getResponse()->getContent()));
    }

    /**
     * Creates all the test data for the database.
     */
    private function createTestData() {
        $fluxuserController = new FluxuserController();

        $factory = new FactoryFluxuser($this->entityManager);
        $systemAccount = $factory->createSystemAccount();
        $this->userGuest = $factory->createGuestUser($fluxuserController, $systemAccount);
        $this->userUser = $factory->createUserUser($fluxuserController, $systemAccount);
        $this->userAdmin = $factory->createAdminUser($fluxuserController, $systemAccount);
        $this->userOwner = $factory->createOwnerUser($fluxuserController, $systemAccount);
        $this->userProjectmanager = $factory->createProjectManagerUser($fluxuserController, $systemAccount);
    }
    
}
