<?php

namespace Fluxuser\Controller;

use Doctrine\ORM\Tools\SchemaTool;
use FluxuserTest\FactoryFluxuser;
use Zend\Authentication\AuthenticationService;
use Zend\Test\PHPUnit\Controller\AbstractHttpControllerTestCase;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-12-24 at 12:49:51.
 */
class LoginControllerTest extends AbstractHttpControllerTestCase {

    protected $entityManager;
    private $user;
    private $guest;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->setApplicationConfig(include 'config/application.config.php');

        $this->entityManager = $this->getApplicationServiceLocator()->get('doctrine.entitymanager.orm_default');
        $tool = new SchemaTool($this->entityManager);

        $this->entityManager->clear();

        $mdFactory = $this->entityManager->getMetadataFactory();
        $tool->dropSchema($mdFactory->getAllMetadata());
        $tool->createSchema($mdFactory->getAllMetadata());

        $this->createTestUser();

        parent::setUp();
    }

    private function createTestUser() {
        $factory = new FactoryFluxuser($this->entityManager);
        $loginController = new LoginController();
        $systemAccount = $factory->createSystemAccount();
        $this->guest = $factory->createGuestUser($loginController, $systemAccount);
        $this->user = $factory->createUserUser($loginController, $systemAccount);
        $factory->createOwnerUser($loginController, $systemAccount);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        $this->entityManager = $this->getApplicationServiceLocator()->get('doctrine.entitymanager.orm_default');
        $tool = new SchemaTool($this->entityManager);

        $this->entityManager->clear();

        $mdFactory = $this->entityManager->getMetadataFactory();
        $tool->dropSchema($mdFactory->getAllMetadata());
        $this->reset();
        parent::tearDown();
    }

    /**
     * Tests that the login page is being rendered.
     * 
     * @covers Fluxuser\Controller\LoginController::loginAction
     */
    public function testShowLoginPage() {
        $this->dispatch('/');

        $this->assertResponseStatusCode(200);
        $this->assertActionName('login');
        $this->assertQuery('.login-submit-button'); // Checking that the login button is shown.
    }

    /**
     * Tests that an existing user can login.
     * 
     * @covers Fluxuser\Controller\LoginController::loginAction
     */
    public function testUserCanLogin() {
        $this->dispatch('/');
        $postData = array(
            'workEmail' => $this->user->getWorkemail(),
            'password'  => 'password',
        );
        $this->dispatch('/', 'POST', $postData);
        $auth = new AuthenticationService();
        $this->assertTrue($auth->hasIdentity(), 'The user did not login successfully!');
        $this->assertResponseStatusCode(302);
        $this->assertRedirectTo('/mytask');
    }

    /**
     * Tests that an user recieves an error message when wrong credentials is entered.
     * 
     * @covers Fluxuser\Controller\LoginController::loginAction
     */
    public function testUserGetErrorMessageWithWrongLogin() {
        $this->dispatch('');
        $postData = array(
            'workEmail' => 'wrong',
            'password'  => 'wrong',
        );
        $this->dispatch('/', 'POST', $postData);
        $this->assertQuery('.label-danger', 'Incorrect creadentials');
    }

    /**
     * Tests that an user is being redirected to the login page, if the user 
     * is not currently logged in.
     * 
     * @covers Fluxuser\Controller\LoginController::loginAction
     */
    public function testUserIsBeingRediectedToLoginPageIfNotLoggedIn() {
        $this->markTestSkipped('This test crashes the entire test suite');
        $this->dispatch('/task');
        $this->assertRedirectTo('/');
        $this->assertResponseStatusCode(403);
    }

    /**
     * Tests that an logged in user can logout and is being redirected to login.
     * 
     * @covers Fluxuser\Controller\LoginController::logoutAction
     */
    public function testUserCanLogoutAndIsBeingRedirectedToLogin() {
        $postData = array(
            'workEmail' => $this->user->getWorkEmail(),
            'password'  => 'password',
        );
        $this->dispatch('/', 'POST', $postData);

        $auth = new AuthenticationService();
        $this->assertTrue($auth->hasIdentity(), 'The user did not login successfully!');

        // We reset the response headers before making a new request.
        $this->getResponse()->getHeaders()->clearHeaders();
        
        $this->dispatch('/logout');
        $this->assertFalse($auth->hasIdentity(), 'The user did not logout successfully!');
        $this->assertResponseStatusCode(302);
        $this->assertRedirect();
        $this->assertRedirectTo('/login');
    }

    /**
     * Tests that an logged in user can logout and is being redirected to login.
     * 
     * @covers Fluxuser\Controller\LoginController::logoutAction
     */
    public function testLogout() {
        $this->dispatch('/');
        $postData = array(
            'workEmail' => $this->user->getWorkemail(),
            'password'  => 'password',
        );
        $this->dispatch('/', 'POST', $postData);
        $auth = new AuthenticationService();
        $this->assertTrue($auth->hasIdentity(), 'The user did not login successfully!');
        $this->assertResponseStatusCode(302);
        $this->assertRedirectTo('/mytask');
        $this->getResponse()->getHeaders()->clearHeaders();
        
        $this->dispatch('/logout');
        $auth = new AuthenticationService();
        $this->assertFalse($auth->hasIdentity(), 'The user is logged in!');
        $this->assertResponseStatusCode(302);
        $this->assertRedirectTo('/login');
    }

}
